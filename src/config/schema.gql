# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type OrganizationLocationObj {
  _id: String!
  organizationId: String!
  name: String
  state: String!
  city: String!
  street: String!
  number: String!
  complement: String
  postalCode: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type OrganizationObj {
  _id: String!
  name: String!
  businessSegment: String!
  businessRepresentantId: String
  locations: [OrganizationLocationObj!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccountConfirmationOutput {
  _id: String!
  organizationId: String!
  accountStatus: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CreateUserInvitationOutput {
  _id: String!
  organizationId: String!
  email: String!
  accountStatus: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAuthData {
  accessToken: String!
}

type LoginUserOutput {
  _id: String!
  auth: UserAuthData!
  organizationId: String!
  firstName: String!
  lastName: String!
  accountStatus: String!
  email: String!
  phoneNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GetUserOutput {
  _id: String!
  organizationId: String!
  accountStatus: String!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SetUserLocationOutput {
  newAccessToken: String!
}

type Category {
  _id: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ListCategoriesOutput {
  count: Float!
  limit: Float!
  offset: Float!
  data: [Category!]!
}

type Product {
  _id: String!
  isActive: Boolean!
  name: String!
  description: String
  originalPrice: Float!
  promotionalPrice: Float
  isPromotionalPriceEnabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ListProductsOutput {
  count: Float!
  limit: Float!
  offset: Float!
  data: [Product!]!
}

type CustomerObj {
  _id: String!
  organizationId: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type TableObj {
  _id: String!
  organizationId: String!
  locationId: String!
  identifier: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderPriceInfo {
  total: Float!
  fees: Float
  discount: Float!
}

type OrderPaymentInfo {
  total: Float!
  paidAmount: Float!
  paymentStatus: TableOrderPaymentStatuses!
  method: PaymentMethods
  instalments: Float!
}

enum TableOrderPaymentStatuses {
  PENDING
  PAID
}

enum PaymentMethods {
  PIX
  CASH
  CREDIT_CARD
  DEBIT_CARD
}

type TableInfo {
  _id: String!
  identifier: String!
}

type TableOrderItemObj {
  _id: String!
  quantity: Float!
  productId: String!
  discount: Float!
  productPrice: Float!
  observation: String
  total: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TableOrderObj {
  _id: String!
  organizationId: String!
  locationId: String!
  status: TableOrderStatuses!
  table: TableInfo!
  pricing: OrderPriceInfo!
  payment: OrderPaymentInfo!
  items: [TableOrderItemObj!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TableOrderStatuses {
  IN_ATTENDANCE
  FINISHED
}

type ListTableOrdersOutput {
  limit: Float!
  offset: Float!
  ordersCount: Float!
  orders: [TableOrderObj!]!
}

type CategoriesWithProducts {
  _id: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]!
}

type MenuObj {
  categories: [CategoriesWithProducts!]!
}

type Query {
  listProducts(input: ListProductsInput!): ListProductsOutput!
  me: GetUserOutput!
  getOrganization(input: GetOrganizationInput!): OrganizationObj!
  listOrganizationLocations(input: ListOrganizationLocationsInput!): [OrganizationLocationObj!]!
  listCategories(input: ListCategoriesInput!): ListCategoriesOutput!
  listLocationTables: [TableObj!]!
  listTableOrders(input: ListTableOrdersInput!): ListTableOrdersOutput!
  getMenu(input: GetMenuInput!): MenuObj!
}

input ListProductsInput {
  limit: Float
  offset: Float
}

input GetOrganizationInput {
  organizationId: String!
}

input ListOrganizationLocationsInput {
  organizationId: String!
}

input ListCategoriesInput {
  limit: Float
  offset: Float
}

input ListTableOrdersInput {
  limit: Float
  offset: Float
  status: TableOrderStatuses
  creationDate: String
}

input GetMenuInput {
  organizationId: String!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  createUserInvitation(input: CreateUserInvitationInput!): CreateUserInvitationOutput!
  confirmAccount(input: AccountConfirmationInput!): AccountConfirmationOutput!
  setUserLocation(input: SetUserLocationInput!): SetUserLocationOutput!
  login(input: LoginUserInput!): LoginUserOutput!
  createOrganization(input: CreateOrganizationInput!): OrganizationObj!
  createOrganizationLocation(input: CreateOrganizationLocationInput!): OrganizationLocationObj!
  createCategory(input: CreateCategoryInput!): Category!
  createCustomer(input: CreateCustomerInput!): CustomerObj!
  createTable(input: CreateTableInput!): TableObj!
  createTableOrder(input: CreateTableOrderInput!): TableOrderObj!
  addTableOrderItem(input: AddTableOrderItemInput!): TableOrderObj!
}

input CreateProductInput {
  name: String!
  description: String
  isActive: Boolean!
  originalPrice: Float!
  promotionalPrice: Float
  isPromotionalPriceEnabled: Boolean
  categoryIds: [String]
}

input CreateUserInvitationInput {
  email: String!
}

input AccountConfirmationInput {
  _id: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  password: String!
}

input SetUserLocationInput {
  locationId: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateOrganizationInput {
  name: String!
  representantEmail: String!
  businessSegment: String!
}

input CreateOrganizationLocationInput {
  name: String
  state: String!
  city: String!
  street: String!
  number: String!
  complement: String
  postalCode: String!
}

input CreateCategoryInput {
  name: String!
  description: String
}

input CreateCustomerInput {
  organizationId: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
}

input CreateTableInput {
  identifier: String!
}

input CreateTableOrderInput {
  tableId: String!
  items: [TableOrderItemInput!]!
}

input TableOrderItemInput {
  productId: String!
  quantity: Float!
  observation: String
}

input AddTableOrderItemInput {
  tableOrderId: String!
  items: [TableOrderItemInput!]!
}