import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Menu } from '../entities/menu';
import { AutoGeneratedFields } from '@shared/interfaces/auto-generated-fields';

type FilterParams = {
  locationId: string;
  organizationId?: string;
};

type FindParams = FilterParams & { _id: string };

interface IMenuDataSource {
  getByOrganization(organizationId: string): Promise<Menu[]>;
  create(data: Omit<Menu, AutoGeneratedFields>): Promise<Menu>;
}

@Injectable()
export class MenuDataSource implements IMenuDataSource {
  constructor(
    @InjectModel(Menu.name)
    private menuModel: Model<Menu>,
  ) {}

  async getByOrganization(organizationId: string): Promise<Menu[]> {
    return this.menuModel.find({ organizationId });
  }

  async create(data: Omit<Menu, AutoGeneratedFields>): Promise<Menu> {
    const result = await this.menuModel.create(data);
    return result.toObject();
  }

  // get com os produtos e categorias
  async findById(params: FindParams): Promise<Menu> {
    const [menu] = await this.menuModel.aggregate([
      {
        $match: {
          _id: params._id,
        },
      },
      {
        // Realiza o primeiro lookup para buscar as categorias
        $lookup: {
          from: 'categories', // Coleção Categories
          localField: 'categoryIds', // Campo em Menu
          foreignField: '_id', // Campo em Categories
          as: 'categories', // Alias para o resultado
        },
      },
      {
        // Desestrutura o array categories para realizar o segundo lookup
        $unwind: '$categories',
      },
      {
        // Realiza o segundo lookup para buscar os produtos de cada categoria
        $lookup: {
          from: 'products', // Coleção Products
          localField: 'categories.productIds', // Campo productIds em Categories
          foreignField: '_id', // Campo _id em Products
          as: 'categories.products', // Alias para o resultado (aninhado dentro de categories)
        },
      },
      {
        // Agrupa as categorias novamente para cada Menu
        $group: {
          _id: '$_id',
          name: { $first: '$name' },
          categories: { $push: '$categories' },
        },
      },
    ]);

    return menu;
  }
}
