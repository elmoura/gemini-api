import { Injectable } from '@nestjs/common';
import { AutoGeneratedFields } from '@shared/interfaces/auto-generated-fields';
import { Category, CategoryDocument } from '../entities/category';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { IPaginationOptions } from '@shared/interfaces/pagination-options';

interface ICategoryDataSource {
  findById(categoryId: string): Promise<Category>;
  createOne(payload: Omit<Category, AutoGeneratedFields>): Promise<Category>;
  listByOrganization(
    organizationId: string,
    paginationOptions: IPaginationOptions,
  ): Promise<Category[]>;
}

@Injectable()
export class CategoryDataSource implements ICategoryDataSource {
  constructor(
    @InjectModel(Category.name)
    private categoryModel: Model<CategoryDocument>,
  ) {}

  async findById(categoryId: string): Promise<Category> {
    const result = await this.categoryModel.findById(categoryId);
    return result.toObject();
  }

  async createOne(
    payload: Omit<Category, AutoGeneratedFields>,
  ): Promise<Category> {
    const result = await this.categoryModel.create(payload);
    return result.toObject();
  }

  async listByOrganization(
    organizationId: string,
    paginationOptions: IPaginationOptions,
  ): Promise<Category[]> {
    const result = await this.categoryModel.find(
      { organizationId },
      {},
      { skip: paginationOptions.offset, limit: paginationOptions.limit },
    );

    return result.map((item) => item.toObject());
  }
}
