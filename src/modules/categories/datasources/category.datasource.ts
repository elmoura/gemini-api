import { Injectable } from '@nestjs/common';
import { AutoGeneratedFields } from '@shared/interfaces/auto-generated-fields';
import { Category, CategoryDocument } from '../entities/category';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { IPaginationOptions } from '@shared/interfaces/pagination-options';

type FilterParams = {
  locationId: string;
  organizationId?: string;
};

type FindOneParams = {
  _id: string;
} & FilterParams;

type UpdateProductIdsParams = { _id: string; productIds: string[] };

interface ICategoryDataSource {
  findById(params: FindOneParams): Promise<Category>;
  createOne(payload: Omit<Category, AutoGeneratedFields>): Promise<Category>;
  listByOrganization(
    params: FilterParams,
    paginationOptions: IPaginationOptions,
  ): Promise<Category[]>;
  updateOne(categoryId: string, data: Partial<Category>): Promise<boolean>;
}

@Injectable()
export class CategoryDataSource implements ICategoryDataSource {
  constructor(
    @InjectModel(Category.name)
    private categoryModel: Model<CategoryDocument>,
  ) {}

  async findById(params: FindOneParams): Promise<Category | null> {
    const result = await this.categoryModel.findOne(params);
    return result?.toObject();
  }

  async createOne(
    payload: Omit<Category, AutoGeneratedFields>,
  ): Promise<Category> {
    const result = await this.categoryModel.create(payload);
    return result.toObject();
  }

  async listByOrganization(
    params: FilterParams,
    paginationOptions: IPaginationOptions,
  ): Promise<Category[]> {
    const result = await this.categoryModel.find(
      params,
      {},
      { skip: paginationOptions.offset, limit: paginationOptions.limit },
    );

    return result.map((item) => item.toObject());
  }

  async updateOne(
    categoryId: string,
    data: Partial<Category>,
  ): Promise<boolean> {
    const result = await this.categoryModel.updateOne(
      { _id: categoryId },
      data,
    );

    return result.modifiedCount > 0;
  }

  async removeProductsFromCategory(
    input: UpdateProductIdsParams,
  ): Promise<boolean> {
    const result = await this.categoryModel.updateOne(
      { _id: input._id },
      { $pull: { productIds: { $in: input.productIds } } },
    );

    return result.modifiedCount > 0;
  }

  async addProductsToCategory(input: UpdateProductIdsParams) {
    const result = await this.categoryModel.updateOne(
      { _id: input._id },
      { $addToSet: { productIds: { $each: input.productIds } } },
    );

    return result.modifiedCount > 0;
  }
}
