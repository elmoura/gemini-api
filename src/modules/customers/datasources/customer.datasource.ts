import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { AutoGeneratedFields } from '@shared/interfaces/auto-generated-fields';
import { Customer, CustomerDocument } from '../entities/customer';

interface ICustomerDataSource {
  findById(customerId: string): Promise<Customer | null>;
  findByEmail(customerEmail: string): Promise<Customer | null>;
  createOne(payload: Omit<Customer, AutoGeneratedFields>): Promise<Customer>;
}

@Injectable()
export class CustomerDataSource implements ICustomerDataSource {
  constructor(
    @InjectModel(Customer.name)
    private readonly customerModel: Model<CustomerDocument>,
  ) {}

  async findById(customerId: string): Promise<Customer> {
    return this.customerModel.findById(customerId);
  }

  async findByEmail(email: string): Promise<Customer> {
    return this.customerModel.findOne({ email });
  }

  async createOne(
    payload: Omit<Customer, AutoGeneratedFields>,
  ): Promise<Customer> {
    const result = await this.customerModel.create(payload);
    return result.toObject();
  }
}
