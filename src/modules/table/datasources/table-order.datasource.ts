import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { AutoGeneratedFields } from '@shared/interfaces/auto-generated-fields';
import { TableOrder, TableOrderDocument } from '../entities/table-order';
import {
  OrderOptions,
  IPaginationOptions,
} from '@shared/interfaces/pagination-options';
import { TableOrderStatuses } from '../enums/table-order-statuses';

interface IListTableOrdersFilters extends IPaginationOptions {
  status?: TableOrderStatuses;
  creationDate?: OrderOptions;
}

interface ITableOrderDataSource {
  createOne(data: Omit<TableOrder, AutoGeneratedFields>): Promise<TableOrder>;
  listByLocationAndFilters(
    locationId: string,
    filters: IListTableOrdersFilters,
  ): Promise<TableOrder[]>;
}

@Injectable()
export class TableOrderDataSource implements ITableOrderDataSource {
  constructor(
    @InjectModel(TableOrder.name)
    private tableOrderModel: Model<TableOrderDocument>,
  ) {}

  async listByLocationAndFilters(
    locationId: string,
    filters: IListTableOrdersFilters,
  ): Promise<TableOrder[]> {
    const query: Partial<TableOrder> = {
      locationId,
    };

    if (filters.status) query.status = filters.status;

    const filteredOrders = await this.tableOrderModel
      .find(query, {}, { skip: filters.offset, limit: filters.limit })
      .sort({ createdAt: filters.creationDate });

    return filteredOrders.map((item) => item.toObject());
  }

  async createOne(
    data: Omit<TableOrder, AutoGeneratedFields>,
  ): Promise<TableOrder> {
    const order = await this.tableOrderModel.create(data);
    return order.toObject();
  }
}
