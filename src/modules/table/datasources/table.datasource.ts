import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { AutoGeneratedFields } from '@shared/interfaces/auto-generated-fields';
import { Table, TableDocument } from '../entities/table';

interface ITableDataSource {
  getByOrgAndLocationIds(
    organizationId: string,
    locationId: string,
  ): Promise<Table[]>;
  findById(tableId: string): Promise<Table | null>;
  findByTableAndOrgId(
    tableId: string,
    organizationId: string,
  ): Promise<Table | null>;
  createOne(payload: Omit<Table, AutoGeneratedFields>): Promise<Table>;
}

@Injectable()
export class TableDataSource implements ITableDataSource {
  constructor(
    @InjectModel(Table.name)
    private readonly tableModel: Model<TableDocument>,
  ) {}

  async getByOrgAndLocationIds(
    organizationId: string,
    locationId: string,
  ): Promise<Table[]> {
    return this.tableModel.find({ organizationId, locationId });
  }

  async findByTableAndOrgId(
    tableId: string,
    organizationId: string,
  ): Promise<Table> {
    return this.tableModel.findOne({
      _id: tableId,
      organizationId,
    });
  }

  async findById(tableId: string): Promise<Table> {
    return this.tableModel.findById(tableId);
  }

  async createOne(payload: Omit<Table, AutoGeneratedFields>): Promise<Table> {
    const result = await this.tableModel.create(payload);
    return result.toObject();
  }
}
